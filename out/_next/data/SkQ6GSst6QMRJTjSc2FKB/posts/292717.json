{"pageProps":{"post":{"type_of":"article","id":292717,"title":"Phone Number & Email Extractor With Python","description":"Phone Number &amp; Email Extractor  With Python   Imagine you have the boring task of...","readable_publish_date":"Mar 26 '20","slug":"phone-number-email-extractor-with-python-12g2","path":"/samcodesign/phone-number-email-extractor-with-python-12g2","url":"https://dev.to/samcodesign/phone-number-email-extractor-with-python-12g2","comments_count":0,"public_reactions_count":15,"collection_id":null,"published_timestamp":"2020-03-26T22:50:13Z","positive_reactions_count":15,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--uYoZ-e82--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1h7i7qxt4no23195uam.jpeg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vMzogKCN--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1h7i7qxt4no23195uam.jpeg","canonical_url":"https://dev.to/samcodesign/phone-number-email-extractor-with-python-12g2","created_at":"2020-03-26T22:50:14Z","edited_at":"2022-05-25T23:13:03Z","crossposted_at":null,"published_at":"2020-03-26T22:50:13Z","last_comment_at":"2020-03-26T22:50:13Z","reading_time_minutes":3,"tag_list":"python, coding, programming, learning","tags":["python","coding","programming","learning"],"body_html":"<h1>\n  <a name=\"phone-number-amp-email-extractor-with-python\" href=\"#phone-number-amp-email-extractor-with-python\">\n  </a>\n  Phone Number &amp; Email Extractor  With Python\n</h1>\n\n<p>Imagine you have the boring task of finding every phone number and email address in a long web page or document. </p>\n\n<p>... You manually scroll through the page(s) and it might take a long time. <strong><em>But if you had a program that could search the text in your clipboard for phone numbers and email addresses</em></strong>, you could simply press <code>ctrl-A</code> to select all the text, press <code>ctrl-c</code> to copy it to the clipboard, and then run your program. It could replace the text on the clipboard with just the phone numbers and email addresses it finds. Let's plan this out:</p>\n\n<ul>\n<li><p>Get the text off the clipboard.</p></li>\n<li><p>Find all the phone numbers &amp; email add</p></li>\n<li>\n<p>Paste them onto the clipboard</p>\n\n<p>Now we can start thinking about how this might work in code. The code will need to do the following:  </p>\n</li>\n<li><p>Use the <code>pyperclip</code> module to copy and paste strings.</p></li>\n<li><p>Create two <code>regexes</code>, one for matching phone numbers and the other for matching email addresses.</p></li>\n<li><p>Find all matches, not just the first match, of both <code>regexes</code>.</p></li>\n<li><p>Neatly format the matched strings into a single string to paste.</p></li>\n<li><p>Display some kind of message if no matches were found in the Text.</p></li>\n</ul>\n\n<p><strong>Table 1:</strong> <em>Shorthand Codes for Common Character Classes</em>  </p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th><strong>Shorthand character class</strong></th>\n<th>Represents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>Any numeric digit from 0 to 9.</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>Any character that is not a numeric digit from 0 to 9.</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>Any letter, numeric digit, or the underscore character.(Think of this as matching “word” characters.)</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>Any character that is not a letter, numeric digit, or the underscore character.</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>Any space, tab, or newline character. (Think of this as matching “space” characters.)</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>Any character that is not a space, tab, or newline.</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Create a new python3 file, save it (for me it will be PhoneAndEmailFinder.py) and write the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">pyperclip</span><span class=\"p\">,</span> <span class=\"n\">re</span> <span class=\"c1\"># Importing the libraries(this case: regex and pyperclip)\n</span>\n<span class=\"c1\"># Create phone regex.\n</span><span class=\"n\">phoneRegex</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s\">'''(\n    (\\d{3}|\\(\\d{3}\\))? # area code\n    (\\s|-|\\.)? # separator\n    (\\d{3}) # first 3 digits\n    (\\s|-|\\.) # separator\n    (\\d{4}) # last 4 digits\n    (\\s*(ext|x|ext.)\\s*(\\d{2,5}))? # extension\n    )'''</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># TODO: Create email regex.\n# TODO: Find matches in clipboard text.\n# TODO: Copy results to the clipboard.\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The TODO comments will be replaced as you write the actual code.</p>\n\n<p>So it's time to explain the previous code;  the phone number begins with an <em>optional area code</em> (indicator) with a max digit of 3 (that is,<code>\\d{3}</code>) or three digits within parentheses (that is,<code>\\(\\d{3}\\)</code>),<br>\nyou should have a pipe joining those parts. </p>\n\n<p>The phone number separator character can be a space (\\s), hyphen (-), or period (.), so these parts should also be joined by pipes. The next few parts of the regular expression are straightforward: three digits, followed by another separator, followed by four digits. The last part is an optional extension made up of any number of spaces followed by ext, x, or ext., followed by two to five digits. </p>\n\n<p>You will also need a regular expression that can match email addresses.<br>\nMake your program look like the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Create email regex.\n</span><span class=\"n\">emailRegex</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s\">'''(\n    [a-zA-Z0-9._%+-] + #username\n    @                   # @symbole\n    [a-zA-Z0-9.-] +     # domain\n    (\\.[a-zA-Z]{2,4})   # dot-something\n    )'''</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Step 3:</strong> <em>Find All Matches in the Clipboard Text</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Find matches in the clipboard text.\n</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pyperclip</span><span class=\"p\">.</span><span class=\"n\">paste</span><span class=\"p\">())</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">groups</span> <span class=\"ow\">in</span> <span class=\"n\">phoneRegex</span><span class=\"p\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">phoneNum</span> <span class=\"o\">=</span> <span class=\"s\">'-'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]])</span>\n    <span class=\"k\">if</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s\">''</span><span class=\"p\">:</span>\n        <span class=\"n\">phoneNum</span> <span class=\"o\">+=</span> <span class=\"s\">' x'</span> <span class=\"o\">+</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n    <span class=\"n\">matches</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">phoneNum</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">groups</span> <span class=\"ow\">in</span> <span class=\"n\">emailRegex</span><span class=\"p\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">matches</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>There is one tuple<sup id=\"fnref1\"><a href=\"#fn1\">1</a></sup>for each match, and each tuple contains strings for each group in the regular expression.  </p>\n\n<p><strong>Step 4:</strong> <em>Join the Matches into a String for the Clipboard</em><br>\n    Now that you have the email addresses and phone numbers as a list of strings in matches, you want to put them on the clipboard. The <code>pyperclip.copy()</code> function takes only a single string value, not a list of strings, so you call the join() method on matches.<br>\n    To make it easier to see that the program is working, let’s print any matches you find to the terminal. And if no phone numbers or email addresses were found, the program should tell the user this. Make your program look like the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">pyperclip</span><span class=\"p\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Copied to clipboard: '</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">))</span>\n<span class=\"c1\"># TODO: Pasting the content --&gt; txt file.\n</span>    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pyperclip</span><span class=\"p\">.</span><span class=\"n\">paste</span><span class=\"p\">()</span> \n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'phone&amp;emailfinder.txt'</span><span class=\"p\">,</span><span class=\"s\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">g</span><span class=\"p\">:</span>\n        <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'No phone numbers or email addresses found.'</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>(as bonus it will automatically store it in a txt file)</p>\n\n\n<hr>\n\n<ol>\n\n<li id=\"fn1\">\n<p>a data structure consisting of multiple parts. <a href=\"#fnref1\">↩</a></p>\n</li>\n\n</ol>\n\n","body_markdown":"# Phone Number & Email Extractor  With Python\n\nImagine you have the boring task of finding every phone number and email address in a long web page or document. \n\n... You manually scroll through the page(s) and it might take a long time. ***But if you had a program that could search the text in your clipboard for phone numbers and email addresses***, you could simply press ``ctrl-A`` to select all the text, press ``ctrl-c`` to copy it to the clipboard, and then run your program. It could replace the text on the clipboard with just the phone numbers and email addresses it finds. Let's plan this out:\n\n -  Get the text off the clipboard.\n\n - Find all the phone numbers & email add\n\n - Paste them onto the clipboard\n\n       Now we can start thinking about how this might work in code. The code will need to do the following:  \n\n - Use the ``pyperclip`` module to copy and paste strings.\n\n - Create two ``regexes``, one for matching phone numbers and the other for matching email addresses.\n\n - Find all matches, not just the first match, of both ``regexes``.\n\n - Neatly format the matched strings into a single string to paste.\n\n - Display some kind of message if no matches were found in the Text.\n\n\n**Table 1:** *Shorthand Codes for Common Character Classes*  \n\n| **Shorthand character class** |                          Represents                          |\n| :---------------------------: | :----------------------------------------------------------: |\n|              \\d               |                Any numeric digit from 0 to 9.                |\n|              \\D               |    Any character that is not a numeric digit from 0 to 9.    |\n|              \\w               | Any letter, numeric digit, or the underscore character.(Think of this as matching “word” characters.) |\n|              \\W               | Any character that is not a letter, numeric digit, or the underscore character. |\n|              \\s               | Any space, tab, or newline character. (Think of this as matching “space” characters.) |\n|              \\S               |     Any character that is not a space, tab, or newline.      |\n\nCreate a new python3 file, save it (for me it will be PhoneAndEmailFinder.py) and write the following:\n\n```python\nimport pyperclip, re # Importing the libraries(this case: regex and pyperclip)\n\n# Create phone regex.\nphoneRegex = re.compile(r'''(\n    (\\d{3}|\\(\\d{3}\\))? # area code\n    (\\s|-|\\.)? # separator\n    (\\d{3}) # first 3 digits\n    (\\s|-|\\.) # separator\n    (\\d{4}) # last 4 digits\n    (\\s*(ext|x|ext.)\\s*(\\d{2,5}))? # extension\n    )''', re.VERBOSE)\n\n# TODO: Create email regex.\n# TODO: Find matches in clipboard text.\n# TODO: Copy results to the clipboard.\n```\n\nThe TODO comments will be replaced as you write the actual code.\n\nSo it's time to explain the previous code;  the phone number begins with an *optional area code* (indicator) with a max digit of 3 (that is,`` \\d{3}``) or three digits within parentheses (that is,`` \\(\\d{3}\\)``),\nyou should have a pipe joining those parts. \n\nThe phone number separator character can be a space (\\s), hyphen (-), or period (.), so these parts should also be joined by pipes. The next few parts of the regular expression are straightforward: three digits, followed by another separator, followed by four digits. The last part is an optional extension made up of any number of spaces followed by ext, x, or ext., followed by two to five digits. \n\nYou will also need a regular expression that can match email addresses.\nMake your program look like the following:  \n\n```PYTHon\n# Create email regex.\nemailRegex = re.compile(r'''(\n    [a-zA-Z0-9._%+-] + #username\n    @                   # @symbole\n    [a-zA-Z0-9.-] +     # domain\n    (\\.[a-zA-Z]{2,4})   # dot-something\n    )''', re.VERBOSE)\n```\n\n**Step 3:** *Find All Matches in the Clipboard Text*\n\n```python\n# Find matches in the clipboard text.\ntext = str(pyperclip.paste())\nmatches = []\nfor groups in phoneRegex.findall(text):\n    phoneNum = '-'.join([groups[1], groups[3], groups[5]])\n    if groups[8] != '':\n        phoneNum += ' x' + groups[8]\n    matches.append(phoneNum)\nfor groups in emailRegex.findall(text):\n    matches.append(groups[0])\n```\n\nThere is one tuple[^1]for each match, and each tuple contains strings for each group in the regular expression.  \n\n**Step 4:** *Join the Matches into a String for the Clipboard*\n\tNow that you have the email addresses and phone numbers as a list of strings in matches, you want to put them on the clipboard. The ``pyperclip.copy()`` function takes only a single string value, not a list of strings, so you call the join() method on matches.\n\tTo make it easier to see that the program is working, let’s print any matches you find to the terminal. And if no phone numbers or email addresses were found, the program should tell the user this. Make your program look like the following:  \n\n```python\nif len(matches) > 0:\n    pyperclip.copy('\\n'.join(matches))\n    print('Copied to clipboard: ')\n    print('\\n'.join(matches))\n# TODO: Pasting the content --> txt file.\n    s = pyperclip.paste() \n    with open('phone&emailfinder.txt','w') as g:\n        g.write(s)\n    g.close()\nelse:\n    print('No phone numbers or email addresses found.')\n```\n\n(as bonus it will automatically store it in a txt file)\n\n[^1]: a data structure consisting of multiple parts.\n\n\n\n\n\n","user":{"name":"Sam","username":"samcodesign","twitter_username":null,"github_username":"samcodesign","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--U5vseFIe--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288711/15ec290f-ad01-49f4-a54c-9e50fa5a7099.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--fAoBfFAG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288711/15ec290f-ad01-49f4-a54c-9e50fa5a7099.png"}}},"__N_SSG":true}