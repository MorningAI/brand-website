{"pageProps":{"post":{"type_of":"article","id":276791,"title":"Introduction To Data Encryption With Python","description":"Summary:     Cryptography   Definition Terminologies of Cryptography    Reverse...","readable_publish_date":"Mar 8 '20","slug":"introduction-to-data-encryption-with-python-58a8","path":"/samcodesign/introduction-to-data-encryption-with-python-58a8","url":"https://dev.to/samcodesign/introduction-to-data-encryption-with-python-58a8","comments_count":3,"public_reactions_count":31,"collection_id":null,"published_timestamp":"2020-03-08T20:35:41Z","positive_reactions_count":31,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--4iAP2OnR--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmbmjb0w8g5ls7zhrprg.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--7q-qzQyY--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmbmjb0w8g5ls7zhrprg.png","canonical_url":"https://dev.to/samcodesign/introduction-to-data-encryption-with-python-58a8","created_at":"2020-03-08T20:35:41Z","edited_at":"2022-05-25T23:17:34Z","crossposted_at":null,"published_at":"2020-03-08T20:35:41Z","last_comment_at":"2020-11-10T13:44:10Z","reading_time_minutes":6,"tag_list":"python, cryptography, cybersecurity","tags":["python","cryptography","cybersecurity"],"body_html":"<blockquote>\n<p><strong><em>Summary:</em></strong> </p>\n\n<ol>\n<li>\n<p><em>Cryptography</em></p>\n\n<ol>\n<li><em>Definition</em></li>\n<li><em>Terminologies of Cryptography</em></li>\n</ol>\n</li>\n<li>\n<p><em>Reverse Cipher</em></p>\n\n<ol>\n<li><em>Example</em></li>\n<li><em>Python Basics</em></li>\n<li><em>Coding a Reverse Cipher program</em></li>\n</ol>\n</li>\n<li>\n<p><em>Algorithm of Caesar Cipher</em></p>\n\n<ol>\n<li><em>Coding Time</em></li>\n<li><em>Getting the Caesar cipher key</em></li>\n<li><em>Using the key to find the password</em></li>\n</ol>\n</li>\n<li>\n<p><em>Algorithm ROT 13 Cipher</em></p>\n\n<ol>\n<li><em>Definition</em></li>\n</ol>\n</li>\n<li>\n<p><em>Creating A Cipher</em></p>\n\n<ol>\n<li><em>Installing the library</em></li>\n<li><em>Testing the library</em></li>\n<li><em>Generating a key</em></li>\n<li><em>Encrypting</em></li>\n<li><em>Decrypting</em></li>\n</ol>\n</li>\n<li>\n<p><em>Bonus</em></p>\n\n<ol>\n<li><em>Generating a Key From A Password</em></li>\n<li><em>Encrypting and Decrypting Files</em></li>\n</ol>\n</li>\n</ol>\n</blockquote>\n\n<p><a href=\"https://i.giphy.com/media/BemKqR9RDK4V2/giphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://i.giphy.com/media/BemKqR9RDK4V2/giphy.gif\" alt=\"video\" loading=\"lazy\" width=\"495\" height=\"296\" data-animated=\"true\"></a></p>\n\n<h2>\n  <a name=\"1-cryptography\" href=\"#1-cryptography\">\n  </a>\n  1. Cryptography\n</h2>\n\n<h3>\n  <a name=\"11-definition\" href=\"#11-definition\">\n  </a>\n  1.1 Definition\n</h3>\n\n<p><strong>Cryptography</strong> is <code>the art of communication between two users via coded messages</code>. The science of cryptography emerged with the basic motive of providing security to the confidential messages transferred from one party to another. </p>\n\n<p><code>The pre-fix \"crypt\" means \"hidden\" or \"vault\" and the suffix \"graphy\" stands for \"writing\".</code></p>\n\n<p>Cryptography is defined as the art and science of concealing the message to introduce privacy and secrecy as recognized in information security.</p>\n\n<h3>\n  <a name=\"12-terminologies-of-cryptography\" href=\"#12-terminologies-of-cryptography\">\n  </a>\n  1.2 Terminologies of Cryptography:\n</h3>\n\n<ul>\n<li>\n<p><strong>Plain Text (Texte Brut):</strong> </p>\n\n<p>​     The text which is readable and can be understood by all users.</p>\n</li>\n<li>\n<p><strong>Cipher Text (Texte Chiffré):</strong></p>\n\n<p>​     The message obtained after applying cryptography on plain text.</p>\n</li>\n<li>\n<p><strong>Encryption (Chiffrement):</strong></p>\n\n<p>​     The process of converting (from plain text to Cipher text).</p>\n</li>\n<li>\n<p><strong>Decryption (Décryptage):</strong></p>\n\n<p>​     The process of converting (from cipher text to plain text).</p>\n\n<p>​                                             </p>\n\n<p>​                                                         <em>(Drawing a schema)</em></p>\n</li>\n</ul>\n\n<h2>\n  <a name=\"%C2%A02-reverse-cipher\" href=\"#%C2%A02-reverse-cipher\">\n  </a>\n   2. Reverse Cipher\n</h2>\n\n<h3>\n  <a name=\"%C2%A021-example\" href=\"#%C2%A021-example\">\n  </a>\n   2.1 Example:\n</h3>\n\n<blockquote>\n<p><code>Let’s examine the following examples of Plaintext and Reverse Cipher</code></p>\n\n<ol>\n<li><p>Every skill acquired in cyber security is hard won. It includes a wide array of prerequisites (even) to get started.</p></li>\n<li><p>edrtarts teg ot setisiuqererp fo yarra a sedulcni  now drah si ytiruces rebyc ni deriuqca lliks yrevE.</p></li>\n</ol>\n\n<p>With statement (1), anybody can read and understand it clearly. What about statement 2 — it’s absolute gibberish, or so it seems like it. However, a cryptanalyst may be able to decrypt the concept of statement (2).</p>\n\n<p>In the examples above, statement (1) is plain text, while statement (2) is a reverse cipher text. Thus, cryptography is defined as the art of manipulating or scrambling plain text into cipher text.</p>\n</blockquote>\n\n<h3>\n  <a name=\"%C2%A022-python-basics\" href=\"#%C2%A022-python-basics\">\n  </a>\n   2.2 Python Basics\n</h3>\n\n<p>​ <strong>Python</strong> is an <a href=\"https://en.wikipedia.org/wiki/Interpreted_language\">interpreted</a>, <a href=\"https://en.wikipedia.org/wiki/High-level_programming_language\">high-level</a>, <a href=\"https://en.wikipedia.org/wiki/General-purpose_programming_language\">general-purpose</a> <a href=\"https://en.wikipedia.org/wiki/Programming_language\">programming language</a>. Created by <a href=\"https://en.wikipedia.org/wiki/Guido_van_Rossum\">Guido van Rossum</a> and first released in 1991, Python's design philosophy emphasizes <a href=\"https://en.wikipedia.org/wiki/Code_readability\">code readability</a> with its notable use of <a href=\"https://en.wikipedia.org/wiki/Off-side_rule\">significant whitespace</a>. Its language constructs and <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">object-oriented</a> approach aim to help programmers write clear, logical code for small and large-scale projects.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Printing a \"Hello World!\"\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Declaration of strings is shown below:\n</span><span class=\"n\">variable_name_string</span> <span class=\"o\">=</span> <span class=\"s\">\"Variable content string\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">variable_name_string</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># He lists of python can be declared as compound data types, separated by commas and enclosed within square brackets ([]).\n</span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">'abcd'</span><span class=\"p\">,</span> <span class=\"mi\">786</span> <span class=\"p\">,</span> <span class=\"mf\">2.23</span><span class=\"p\">,</span> <span class=\"s\">'rocky'</span><span class=\"p\">,</span> <span class=\"mf\">70.2</span> <span class=\"p\">]</span>\n<span class=\"n\">tinylist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s\">'rocky'</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tinylist</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python dictionary is a type of hash table. A dictionary key can be almost any data type of Python, which are usually numbers or strings.\n</span><span class=\"n\">thisdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s\">\"brand\"</span><span class=\"p\">:</span> <span class=\"s\">\"Ford\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"model\"</span><span class=\"p\">:</span> <span class=\"s\">\"Mustang\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1964</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">[</span><span class=\"s\">\"model\"</span><span class=\"p\">])</span> <span class=\"c1\"># Note the difference\n</span>\n<span class=\"c1\"># Printing the values\n</span><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">thisdict</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Printing the keys\n</span><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">thisdict</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Printing keys + values\n</span><span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">thisdict</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># adding a key and its value\n</span><span class=\"n\">thisdict</span><span class=\"p\">[</span><span class=\"s\">\"color\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"red\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># removing the first item (here it's brand)\n</span><span class=\"n\">thisdict</span><span class=\"p\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The del keyword removes the item with the specified key name\n</span><span class=\"k\">del</span> <span class=\"n\">thisdict</span><span class=\"p\">[</span><span class=\"s\">\"model\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thisdict</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"23-coding-a-reverse-cipher-program\" href=\"#23-coding-a-reverse-cipher-program\">\n  </a>\n  2.3 Coding a Reverse Cipher Program:\n</h3>\n\n<p>(Making a suitable algorithm for this case) -&gt; Cipher type = Reverse Cipher.</p>\n\n\n<hr>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">'This is program to explain reverse cipher.'</span>\n<span class=\"n\">translated</span> <span class=\"o\">=</span> <span class=\"s\">''</span> <span class=\"c1\">#cipher text is stored in this variable\n</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n   <span class=\"n\">translated</span> <span class=\"o\">=</span> <span class=\"n\">translated</span> <span class=\"o\">+</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n   <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"The cipher text is : \"</span><span class=\"p\">,</span> <span class=\"n\">translated</span><span class=\"p\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"3-algorithm-of-caesar-cipher\" href=\"#3-algorithm-of-caesar-cipher\">\n  </a>\n  3. Algorithm of Caesar Cipher\n</h2>\n\n<p>The algorithm of Caesar cipher holds the following features:</p>\n\n<ul>\n<li>Caesar Cipher Technique is the simple and easy method of encryption technique.</li>\n<li>It is simple type of substitution cipher.</li>\n<li>Each letter of plain text is replaced by a letter with some fixed number of positions down with alphabet.</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DHDCir1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tutorialspoint.com/cryptography_with_python/images/algorithm_caesar_cipher.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DHDCir1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tutorialspoint.com/cryptography_with_python/images/algorithm_caesar_cipher.jpg\" alt=\"Algorithm of Caesar Cipher\" loading=\"lazy\" width=\"555\" height=\"251\"></a></p>\n\n\n<hr>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#A python program to illustrate Caesar Cipher Technique \n</span><span class=\"k\">def</span> <span class=\"nf\">encrypt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">):</span> \n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span> \n\n    <span class=\"c1\"># traverse text \n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)):</span> \n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> \n\n        <span class=\"c1\"># Encrypt uppercase characters \n</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">.</span><span class=\"n\">isupper</span><span class=\"p\">()):</span> \n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"nb\">chr</span><span class=\"p\">((</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">-</span><span class=\"mi\">65</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"mi\">65</span><span class=\"p\">)</span> \n\n        <span class=\"c1\"># Encrypt lowercase characters \n</span>        <span class=\"k\">else</span><span class=\"p\">:</span> \n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"nb\">chr</span><span class=\"p\">((</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"o\">-</span> <span class=\"mi\">97</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"mi\">97</span><span class=\"p\">)</span> \n\n    <span class=\"k\">return</span> <span class=\"n\">result</span> \n\n<span class=\"c1\">#check the above function \n</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"CIPHER CAESAR ENCRYPTION\"</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">\"Text : \"</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">)</span> \n<span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">\"Shift : \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span> \n<span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">\"Cipher: \"</span> <span class=\"o\">+</span> <span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">))</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"32-getting-the-key\" href=\"#32-getting-the-key\">\n  </a>\n  3.2 Getting the key\n</h4>\n\n\n<hr>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">'GIEWIVrGMTLIVrHIQS'</span> <span class=\"c1\">#encrypted message\n</span><span class=\"n\">LETTERS</span> <span class=\"o\">=</span> <span class=\"s\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">LETTERS</span><span class=\"p\">)):</span>\n   <span class=\"n\">translated</span> <span class=\"o\">=</span> <span class=\"s\">''</span>\n   <span class=\"k\">for</span> <span class=\"n\">symbol</span> <span class=\"ow\">in</span> <span class=\"n\">message</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"n\">symbol</span> <span class=\"ow\">in</span> <span class=\"n\">LETTERS</span><span class=\"p\">:</span>\n         <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">LETTERS</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n         <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">-</span> <span class=\"n\">key</span>\n         <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">LETTERS</span><span class=\"p\">)</span>\n         <span class=\"n\">translated</span> <span class=\"o\">=</span> <span class=\"n\">translated</span> <span class=\"o\">+</span> <span class=\"n\">LETTERS</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n         <span class=\"n\">translated</span> <span class=\"o\">=</span> <span class=\"n\">translated</span> <span class=\"o\">+</span> <span class=\"n\">symbol</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Hacking key #%s: %s'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">translated</span><span class=\"p\">))</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"33-hacking-the-caesar-cipher-using-the-key\" href=\"#33-hacking-the-caesar-cipher-using-the-key\">\n  </a>\n  3.3 Hacking the CAESAR cipher using the Key\n</h4>\n\n\n<hr>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"n\">alphabet</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">.</span><span class=\"n\">ascii_lowercase</span> <span class=\"c1\"># \"abcdefghijklmnopqrstuvwxyz\"\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">decrypt</span><span class=\"p\">():</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Welcome to Caesar Cipher Decryption.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">encrypted_message</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Enter the message you would like to decrypt: \"</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Enter key to decrypt: \"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">decrypted_message</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">encrypted_message</span><span class=\"p\">:</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">alphabet</span><span class=\"p\">:</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">alphabet</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n            <span class=\"n\">new_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">position</span> <span class=\"o\">-</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span>\n            <span class=\"n\">new_character</span> <span class=\"o\">=</span> <span class=\"n\">alphabet</span><span class=\"p\">[</span><span class=\"n\">new_position</span><span class=\"p\">]</span>\n            <span class=\"n\">decrypted_message</span> <span class=\"o\">+=</span> <span class=\"n\">new_character</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">decrypted_message</span> <span class=\"o\">+=</span> <span class=\"n\">c</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Decrypting your message...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># give an appearance of doing something complicated\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Stand by, almost finished...</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># more of the same\n</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Your decrypted message is:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decrypted_message</span><span class=\"p\">)</span>\n\n<span class=\"n\">decrypt</span><span class=\"p\">()</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"4-algorithm-rot-13-cipher\" href=\"#4-algorithm-rot-13-cipher\">\n  </a>\n  4. Algorithm ROT 13 Cipher\n</h2>\n\n<h3>\n  <a name=\"41-definition\" href=\"#41-definition\">\n  </a>\n  4.1 Definition\n</h3>\n\n<p>​ ROT 13 cipher refers to the abbreviated form <strong>Rotate by 13 places</strong>. It is a special case of Caesar Cipher in which shift is always 13. Every letter is shifted by 13 places to encrypt or decrypt the message.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cxlHupJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tutorialspoint.com/cryptography_with_python/images/rot.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cxlHupJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tutorialspoint.com/cryptography_with_python/images/rot.jpg\" alt=\"ROT13 Algorithm Process\" loading=\"lazy\" width=\"600\" height=\"352\"></a></p>\n\n\n<p><a href=\"https://giphy.com/gifs/producthunt-coding-hacking-hacker-time-3oEjHWbXcpeKhTktXi\"></a></p>\n\n<h2>\n  <a name=\"5-lets-cipher\" href=\"#5-lets-cipher\">\n  </a>\n  5. Let's Cipher\n</h2>\n\n<h3>\n  <a name=\"51-installing-the-library\" href=\"#51-installing-the-library\">\n  </a>\n  5.1 Installing the library\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nt\">-m</span> <span class=\"nb\">install </span>cryptography\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h3>\n  <a name=\"52-testing-the-library\" href=\"#52-testing-the-library\">\n  </a>\n  5.2 Testing the library\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">cryptography</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h3>\n  <a name=\"53-generating-a-key\" href=\"#53-generating-a-key\">\n  </a>\n  5.3 Generating a key\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">cryptography.fernet</span> <span class=\"kn\">import</span> <span class=\"n\">Fernet</span> <span class=\"k\">as</span> <span class=\"n\">fn</span>\n\n<span class=\"n\">test_key</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">generate_key</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test_key</span><span class=\"p\">)</span>\n<span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'test_key.key'</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span>\n<span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">test_key</span><span class=\"p\">)</span>\n<span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h3>\n  <a name=\"54-encrypting-a-message\" href=\"#54-encrypting-a-message\">\n  </a>\n  5.4 Encrypting a message\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">cryptography.fernet</span> <span class=\"kn\">import</span> <span class=\"n\">Fernet</span> <span class=\"k\">as</span> <span class=\"n\">ft</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"> Veuillez entrer le message que vous souhaiter crypter: </span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n\n<span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'test_key.key'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">encrypted_message</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">encrypted_message</span><span class=\"p\">)</span>\n<span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h3>\n  <a name=\"%C2%A055-decrypting-a-cipher\" href=\"#%C2%A055-decrypting-a-cipher\">\n  </a>\n   5.5 Decrypting a Cipher\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">cryptography.fernet</span> <span class=\"kn\">import</span> <span class=\"n\">Fernet</span> <span class=\"k\">as</span> <span class=\"n\">ft</span>\n\n<span class=\"n\">encypted_message</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"> Veuillez coller le chiffrement à décrypter: </span><span class=\"se\">\\n\\t</span><span class=\"s\">\"</span><span class=\"p\">).</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n\n<span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'test_key.key'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">ft</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">decrypted_message</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">encypted_message</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\"> \"</span><span class=\"p\">,</span> <span class=\"n\">decrypted_message</span><span class=\"p\">)</span>\n<span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h2>\n  <a name=\"6-bonus\" href=\"#6-bonus\">\n  </a>\n  6. Bonus\n</h2>\n\n<h3>\n  <a name=\"61-generating-a-key-from-a-password\" href=\"#61-generating-a-key-from-a-password\">\n  </a>\n  6.1 Generating a Key From A Password\n</h3>\n\n<p>​ If you want to base your key of a string that the user can input or some other form of input, you can create a key using this input.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cryptography.hazmat.backends</span> <span class=\"kn\">import</span> <span class=\"n\">default_backend</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cryptography.hazmat.primitives</span> <span class=\"kn\">import</span> <span class=\"n\">hashes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cryptography.hazmat.primitives.kdf.pbkdf2</span> <span class=\"kn\">import</span> <span class=\"n\">PBKDF2HMAC</span>\n\n<span class=\"n\">password_provided</span> <span class=\"o\">=</span> <span class=\"s\">\"password\"</span> <span class=\"c1\"># This is input in the form of a string\n</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">password_provided</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"c1\"># Convert to type bytes\n</span><span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'salt_'</span> <span class=\"c1\"># CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes\n</span><span class=\"n\">kdf</span> <span class=\"o\">=</span> <span class=\"n\">PBKDF2HMAC</span><span class=\"p\">(</span>\n    <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">hashes</span><span class=\"p\">.</span><span class=\"n\">SHA256</span><span class=\"p\">(),</span>\n    <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"p\">,</span>\n    <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">,</span>\n    <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">default_backend</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">kdf</span><span class=\"p\">.</span><span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">))</span> <span class=\"c1\"># Can only use kdf once\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"62-encrypting-and-decrypting-files\" href=\"#62-encrypting-and-decrypting-files\">\n  </a>\n  6.2 Encrypting and Decrypting Files\n</h3>\n\n<p>​ We can also encrypt files using this method since files can be read as bytes. Simply open the file, read the bytes, encrypt the data and the write them out to a new file. To encrypt:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">cryptography.fernet</span> <span class=\"kn\">import</span> <span class=\"n\">Fernet</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">''</span> <span class=\"c1\"># Use one of the methods to get a key (it must be the same when decrypting)\n</span><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"s\">'test.txt'</span>\n<span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"s\">'test.encrypted'</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">fernet</span> <span class=\"o\">=</span> <span class=\"n\">Fernet</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">fernet</span><span class=\"p\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can delete input_file if you want\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And then to <strong>decrypt</strong> a file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">cryptography.fernet</span> <span class=\"kn\">import</span> <span class=\"n\">Fernet</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">''</span> <span class=\"c1\"># Use one of the methods to get a key (it must be the same as used in encrypting)\n</span><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"s\">'test.encrypted'</span>\n<span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"s\">'test.txt'</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">fernet</span> <span class=\"o\">=</span> <span class=\"n\">Fernet</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">fernet</span><span class=\"p\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"s\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can delete input_file if you want\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://i.giphy.com/media/dkuZHIQsslFfy/giphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://i.giphy.com/media/dkuZHIQsslFfy/giphy.gif\" alt=\"video\" loading=\"lazy\" width=\"400\" height=\"320\" data-animated=\"true\"></a></p>\n\n","body_markdown":"\n\n> ***Summary:*** \n>\n> 1. *Cryptography*\n>     1. *Definition*\n>     2. *Terminologies of Cryptography*\n>\n> 2. *Reverse Cipher*\n>     1. *Example*\n>     2. *Python Basics*\n>     3. *Coding a Reverse Cipher program*\n>\n> 3. *Algorithm of Caesar Cipher*\n>     1. *Coding Time*\n>     2. *Getting the Caesar cipher key*\n>     3. *Using the key to find the password*\n>\n> 4. *Algorithm ROT 13 Cipher*\n>     1. *Definition*\n>\n> 5. *Creating A Cipher*\n>     1. *Installing the library*\n>     2. *Testing the library*\n>     3. *Generating a key*\n>     4. *Encrypting*\n>     5. *Decrypting*\n>\n> 6. *Bonus*\n>     1. *Generating a Key From A Password*\n>     2. *Encrypting and Decrypting Files*\n>\n \n\n![video](https://media.giphy.com/media/BemKqR9RDK4V2/giphy.gif)\n\n## 1. Cryptography\n\n### 1.1 Definition\n\n**Cryptography** is `the art of communication between two users via coded messages`. The science of cryptography emerged with the basic motive of providing security to the confidential messages transferred from one party to another. \n\n`The pre-fix \"crypt\" means \"hidden\" or \"vault\" and the suffix \"graphy\" stands for \"writing\".`\n\nCryptography is defined as the art and science of concealing the message to introduce privacy and secrecy as recognized in information security.\n\n\n\n### 1.2 Terminologies of Cryptography:\n\n- **Plain Text (Texte Brut):** \n\n    ​\t\tThe text which is readable and can be understood by all users.\n\n- **Cipher Text (Texte Chiffré):**\n\n    ​\t\tThe message obtained after applying cryptography on plain text.\n\n- **Encryption (Chiffrement):**\n\n    ​\t\tThe process of converting (from plain text to Cipher text).\n\n- **Decryption (Décryptage):**\n\n    ​\t\tThe process of converting (from cipher text to plain text).\n\n    ​\t\t\t\t\t\t\t\t\t\t\t\t\n\n    ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*(Drawing a schema)*\n\n    \n\n## 2. Reverse Cipher\n\n### 2.1 Example:\n\n> ``Let’s examine the following examples of Plaintext and Reverse Cipher``\n>\n> 1. Every skill acquired in cyber security is hard won. It includes a wide array of prerequisites (even) to get started.\n>\n> 2. edrtarts teg ot setisiuqererp fo yarra a sedulcni  now drah si ytiruces rebyc ni deriuqca lliks yrevE.\n>\n> \n>\n> With statement (1), anybody can read and understand it clearly. What about statement 2 — it’s absolute gibberish, or so it seems like it. However, a cryptanalyst may be able to decrypt the concept of statement (2).\n>\n> In the examples above, statement (1) is plain text, while statement (2) is a reverse cipher text. Thus, cryptography is defined as the art of manipulating or scrambling plain text into cipher text.\n\n\n\n### 2.2 Python Basics\n\n​\t**Python** is an [interpreted](https://en.wikipedia.org/wiki/Interpreted_language), [high-level](https://en.wikipedia.org/wiki/High-level_programming_language), [general-purpose](https://en.wikipedia.org/wiki/General-purpose_programming_language) [programming language](https://en.wikipedia.org/wiki/Programming_language). Created by [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) and first released in 1991, Python's design philosophy emphasizes [code readability](https://en.wikipedia.org/wiki/Code_readability) with its notable use of [significant whitespace](https://en.wikipedia.org/wiki/Off-side_rule). Its language constructs and [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming) approach aim to help programmers write clear, logical code for small and large-scale projects.\n\n```python\n# Printing a \"Hello World!\"\nprint(\"Hello world!\")\n\n# Declaration of strings is shown below:\nvariable_name_string = \"Variable content string\"\nprint(variable_name_string)\n\n# He lists of python can be declared as compound data types, separated by commas and enclosed within square brackets ([]).\nlist = [ 'abcd', 786 , 2.23, 'rocky', 70.2 ]\ntinylist = [123, 'rocky']\nprint(list[0])\nprint(tinylist)\n\n# Python dictionary is a type of hash table. A dictionary key can be almost any data type of Python, which are usually numbers or strings.\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)\nprint(thisdict[\"model\"]) # Note the difference\n\n# Printing the values\nfor x in thisdict:\n  print(x)\n\n# Printing the keys\nfor x in thisdict:\n  print(thisdict[x])\n\n# Printing keys + values\nfor x, y in thisdict.items():\n  print(x, y) \n\n# adding a key and its value\nthisdict[\"color\"] = \"red\"\nprint(thisdict)\n\n# removing the first item (here it's brand)\nthisdict.popitem()\nprint(thisdict)\n\n# The del keyword removes the item with the specified key name\ndel thisdict[\"model\"]\nprint(thisdict)\n```\n\n\n\n### 2.3 Coding a Reverse Cipher Program:\n\n(Making a suitable algorithm for this case) -> Cipher type = Reverse Cipher.\n\n____\n\n```python\nmessage = 'This is program to explain reverse cipher.'\ntranslated = '' #cipher text is stored in this variable\ni = len(message) - 1\n\nwhile i >= 0:\n   translated = translated + message[i]\n   i = i - 1\nprint(\"The cipher text is : \", translated)\n```\n\n\n\n## 3. Algorithm of Caesar Cipher\n\nThe algorithm of Caesar cipher holds the following features:\n\n- Caesar Cipher Technique is the simple and easy method of encryption technique.\n- It is simple type of substitution cipher.\n- Each letter of plain text is replaced by a letter with some fixed number of positions down with alphabet.\n\n![Algorithm of Caesar Cipher](https://www.tutorialspoint.com/cryptography_with_python/images/algorithm_caesar_cipher.jpg)\n\n--------------\n\n```python\n#A python program to illustrate Caesar Cipher Technique \ndef encrypt(text,s): \n\tresult = \"\" \n\n\t# traverse text \n\tfor i in range(len(text)): \n\t\tchar = text[i] \n\n\t\t# Encrypt uppercase characters \n\t\tif (char.isupper()): \n\t\t\tresult += chr((ord(char) + s-65) % 26 + 65) \n\n\t\t# Encrypt lowercase characters \n\t\telse: \n\t\t\tresult += chr((ord(char) + s - 97) % 26 + 97) \n\n\treturn result \n\n#check the above function \ntext = \"CIPHER CAESAR ENCRYPTION\"\ns = 4\nprint (\"Text : \" + text) \nprint (\"Shift : \" + str(s)) \nprint (\"Cipher: \" + encrypt(text,s))\n```\n\n#### 3.2 Getting the key\n\n------------\n\n```python\nmessage = 'GIEWIVrGMTLIVrHIQS' #encrypted message\nLETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nfor key in range(len(LETTERS)):\n   translated = ''\n   for symbol in message:\n      if symbol in LETTERS:\n         num = LETTERS.find(symbol)\n         num = num - key\n         if num < 0:\n            num = num + len(LETTERS)\n         translated = translated + LETTERS[num]\n      else:\n         translated = translated + symbol\nprint('Hacking key #%s: %s' % (key, translated))\n```\n\n\n\n#### 3.3 Hacking the CAESAR cipher using the Key\n\n-----------------\n\n```python\nimport string\nfrom time import sleep\n\nalphabet = string.ascii_lowercase # \"abcdefghijklmnopqrstuvwxyz\"\n\ndef decrypt():\n    \n    print(\"Welcome to Caesar Cipher Decryption.\\n\")\n    encrypted_message = input(\"Enter the message you would like to decrypt: \").strip()\n    print()\n    key = int(input(\"Enter key to decrypt: \"))\n    \n    decrypted_message = \"\"\n\n    for c in encrypted_message:\n\n        if c in alphabet:\n            position = alphabet.find(c)\n            new_position = (position - key) % 26\n            new_character = alphabet[new_position]\n            decrypted_message += new_character\n        else:\n            decrypted_message += c\n\n    print(\"\\nDecrypting your message...\\n\")\n    sleep(2) # give an appearance of doing something complicated\n    print(\"Stand by, almost finished...\\n\")\n    sleep(2) # more of the same\n    print(\"Your decrypted message is:\\n\")\n    print(decrypted_message)\n\ndecrypt()\n```\n\n\n\n## 4. Algorithm ROT 13 Cipher\n\n### \t4.1 Definition\n\n​\tROT 13 cipher refers to the abbreviated form **Rotate by 13 places**. It is a special case of Caesar Cipher in which shift is always 13. Every letter is shifted by 13 places to encrypt or decrypt the message.\n\n![ROT13 Algorithm Process](https://www.tutorialspoint.com/cryptography_with_python/images/rot.jpg)\n\n\n\n<iframe src=\"https://giphy.com/embed/3oEjHWbXcpeKhTktXi\" width=\"480\" height=\"440\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/producthunt-coding-hacking-hacker-time-3oEjHWbXcpeKhTktXi\"></a></p>\n\n\n\n## 5. Let's Cipher\n\n### 5.1 Installing the library\n\n```sh\npip -m install cryptography\n```\n\n-------------\n\n\n\n### 5.2 Testing the library\n\n```python\nimport cryptography\n```\n\n--------------\n\n\n\n### 5.3 Generating a key\n\n```python\nfrom cryptography.fernet import Fernet as fn\n\ntest_key = fn.generate_key()\nprint(test_key)\nfile = open('test_key.key', 'wb')\nfile.write(test_key)\nfile.close()\n```\n\n------\n\n\n\n### 5.4 Encrypting a message\n\n```python\nfrom cryptography.fernet import Fernet as ft\n\nmessage = input(\"\\n Veuillez entrer le message que vous souhaiter crypter: \\n\").encode()\n\nfile = open('test_key.key', 'rb')\nkey = file.read()\n\nf = ft(key)\nencrypted_message = f.encrypt(message)\nprint(\"\\n\", encrypted_message)\nfile.close()\n```\n\n------\n\n\n\n### 5.5 Decrypting a Cipher\n\n```python\nfrom cryptography.fernet import Fernet as ft\n\nencypted_message = input(\"\\n Veuillez coller le chiffrement à décrypter: \\n\\t\").encode()\n\nfile = open('test_key.key', 'rb')\nkey = file.read()\nf = ft(key)\ndecrypted_message = f.decrypt(encypted_message)\nprint(\"\\n \", decrypted_message)\nfile.close()\n```\n\n----------\n\n\n\n## 6. Bonus\n\n### 6.1 Generating a Key From A Password\n\n​\tIf you want to base your key of a string that the user can input or some other form of input, you can create a key using this input.\n\n```python\nimport base64\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\n\npassword_provided = \"password\" # This is input in the form of a string\npassword = password_provided.encode() # Convert to type bytes\nsalt = b'salt_' # CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=salt,\n    iterations=100000,\n    backend=default_backend()\n)\nkey = base64.urlsafe_b64encode(kdf.derive(password)) # Can only use kdf once\n```\n\n### 6.2 Encrypting and Decrypting Files\n\n​\tWe can also encrypt files using this method since files can be read as bytes. Simply open the file, read the bytes, encrypt the data and the write them out to a new file. To encrypt:\n\n```python\nfrom cryptography.fernet import Fernet\nkey = b'' # Use one of the methods to get a key (it must be the same when decrypting)\ninput_file = 'test.txt'\noutput_file = 'test.encrypted'\n\nwith open(input_file, 'rb') as f:\n    data = f.read()\n\nfernet = Fernet(key)\nencrypted = fernet.encrypt(data)\n\nwith open(output_file, 'wb') as f:\n    f.write(encrypted)\n\n# You can delete input_file if you want\n```\n\nAnd then to **decrypt** a file:\n\n```python\nfrom cryptography.fernet import Fernet\nkey = b'' # Use one of the methods to get a key (it must be the same as used in encrypting)\ninput_file = 'test.encrypted'\noutput_file = 'test.txt'\n\nwith open(input_file, 'rb') as f:\n    data = f.read()\n\nfernet = Fernet(key)\nencrypted = fernet.decrypt(data)\n\nwith open(output_file, 'wb') as f:\n    f.write(encrypted)\n\n# You can delete input_file if you want\n```\n![video](https://media.giphy.com/media/dkuZHIQsslFfy/giphy.gif)\n","user":{"name":"Sam","username":"samcodesign","twitter_username":null,"github_username":"samcodesign","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--U5vseFIe--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288711/15ec290f-ad01-49f4-a54c-9e50fa5a7099.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--fAoBfFAG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/288711/15ec290f-ad01-49f4-a54c-9e50fa5a7099.png"}}},"__N_SSG":true}